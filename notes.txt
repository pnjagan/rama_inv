1.
https://atom.io/packages/node-debugger
// at the end of the day, you need to know how to use a debugger

2.
Invoice test case differed as it involves creating item and customers first....
we need to refer the models in before part of the test case and create the test data
hence holding it off and planning to proceed to reactJS

-----------------------------------
//i am of the thinking that assert can be part of the Code

//npm i express body-parser mongoose morgan config chai --save

//npm i mocha chai-http nyc --save-dev

1.understanding the usage of winston logging - integrate with express error handling and morgon - done
2.error handling in express and utilzing loggign for that - done
3.keep seperate log for common and performance - not needed
4.what is async keyword - used in soo many places in express... -
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await

Scope
----------
Build a full fledged MongoDB based RestAPI for use in web or mobile and in the process cover most common application development scenarios.

Unit test Vs Integration tests
------------------------------
https://www.youtube.com/watch?v=vqAaMVoKz1c



https://www.youtube.com/watch?v=Kk6Er0c7srU&t=429s -- MongoDB aggregation

https://www.youtube.com/watch?v=A3jvoE0jGdE&list=PLWkguCWKqN9OwcbdYm4nUIXnA2IoXX0LI -- aggregate

https://www.youtube.com/watch?v=J_L6r_v3hss -- aggregate

db.marks.insert(
{
student: "jagan",
subject: "maths",
marks: 65
});


db.marks.insert(
{
student: "jagan",
subject: "science",
marks: 90
});

db.marks.insert(
{
student: "jagan",
subject: "social",
marks: 70
});

db.marks.insert(
{
student: "raman",
subject: "maths",
marks: 87
});

db.marks.insert(
{
student: "raman",
subject: "science",
marks: 88
});

db.marks.insert(
{
student: "raman",
subject: "social",
marks: 70
});
----------------------------------------

db.marks.aggregate([
  {$match: {}},
  {$group: {_id: "$student", total_marks: {$sum: "$marks"}}}
]);

db.marks.aggregate([
  {$match: {}},
  {$group: {_id: "$subject", total_marks: {$sum: "$marks"}}}
]);
